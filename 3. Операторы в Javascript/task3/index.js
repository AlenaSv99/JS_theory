// Операторы сравнения
// результат сравнения - булево значение

// Сравнение чисел

const a = 17;
const b = 5;

3 > 1;  //-> true
a > b;  //-> true
a <= b; //-> false
a >= b; //-> true
a == b; //-> false
a != b; //-> true

/*                  */

// Сравнение строк (по лексикограф. порядку)

'a' < 'b';         //-> true
'a' < 'a';         //-> false
'a' <= 'a';        //-> true
'aa' <= 'a';       //-> false
'aa' >= 'a';       //-> true
'aab' >= 'aaa';    //-> true
'a' > 'A';         //-> true, т.к. код символа 'a' больше кода символа 'A'
'a' == 'A';        //-> false

// == - равно (при сравнении), === - эквивалентно

// При сравнении (через ==) разных типов они приводятся к одному

17 == '17'; //-> true
1 == true;  //-> true
false == 0; //-> true

// При эквивалентности (===) разные типы не приводятся к одному

17 === '17'; //-> false
17 === 17; //-> true
1 === true;  //-> false
false === 0; //-> false

// Эквивалентность использовать точнее, т.к.

0 == ''; //-> true
0 == null; //-> false

0 === ''; //-> false (ноль не эквивалентен пустой строке)

// null и undefined с операторами сравнения ведут себя специфично (относиться осторожно)

undefined == null; //-> true
undefined == 0; //-> false
null == 0; //-> false

undefined < 0; //-> false
undefined > 0; //-> false


